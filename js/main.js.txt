// Firebase configuration
const firebaseConfig = {
  apiKey: "AIzaSyCIt9TH6WuGYSV-uCt70vE0Z6j5OKW2m48",
  authDomain: "greatness-a0e85.firebaseapp.com",
  databaseURL: "https://greatness-a0e85-default-rtdb.europe-west1.firebasedatabase.app",
  projectId: "greatness-a0e85",
  storageBucket: "greatness-a0e85.firebasestorage.app",
  messagingSenderId: "986049402276",
  appId: "1:986049402276:web:55a92c2815f389b84cdd31",
  measurementId: "G-4678LWP94G"
};

// Initialize Firebase
firebase.initializeApp(firebaseConfig);
const database = firebase.database();

document.addEventListener('DOMContentLoaded', function() {
    // بيانات الأعضاء الأساسية
    const members = {
        user01: { name: "User1", points: 0, avatar: "default.png", bio: "", badges: [], messages: 0 },
        user02: { name: "User2", points: 0, avatar: "default.png", bio: "", badges: [], messages: 0 },
        user03: { name: "User3", points: 0, avatar: "default.png", bio: "", badges: [], messages: 0 },
        user04: { name: "User4", points: 0, avatar: "default.png", bio: "", badges: [], messages: 0 },
        user05: { name: "User5", points: 0, avatar: "default.png", bio: "", badges: [], messages: 0 },
        user06: { name: "User6", points: 0, avatar: "default.png", bio: "", badges: [], messages: 0 },
        user07: { name: "User7", points: 0, avatar: "default.png", bio: "", badges: [], messages: 0 },
        user08: { name: "User8", points: 0, avatar: "default.png", bio: "", badges: [], messages: 0 },
        user09: { name: "User9", points: 0, avatar: "default.png", bio: "", badges: [], messages: 0 },
        user10: { name: "User10", points: 0, avatar: "default.png", bio: "", badges: [], messages: 0 },
        user11: { name: "User11", points: 0, avatar: "default.png", bio: "", badges: [], messages: 0 },
        user12: { name: "User12", points: 0, avatar: "default.png", bio: "", badges: [], messages: 0 }
    };

    // العناصر الأساسية
    const loginPage = document.getElementById('login-page');
    const chatPage = document.getElementById('chat-page');
    const profilePage = document.getElementById('profile-page');
    const storePage = document.getElementById('store-page');
    const pointsPage = document.getElementById('points-page');
    const loginForm = document.getElementById('login-form');
    const memberCodeInput = document.getElementById('member-code');
    const darkModeToggle = document.getElementById('dark-mode-toggle');
    const darkModeStyle = document.getElementById('dark-mode-style');
    const navLinks = document.querySelectorAll('.main-nav a');
    
    // المتغيرات العامة
    let currentUser = null;
    let darkMode = false;

    // تهيئة الصفحة
    init();

    function init() {
        // تحميل وضع التصفح من localStorage
        const savedDarkMode = localStorage.getItem('darkMode') === 'true';
        if (savedDarkMode) {
            toggleDarkMode();
        }

        // إعداد عناصر الواجهة
        setupEventListeners();
    }

    function setupEventListeners() {
        // تسجيل الدخول
        loginForm.addEventListener('submit', function(e) {
            e.preventDefault();
            const code = memberCodeInput.value.trim().toLowerCase();
            
            if (members[code]) {
                login(code);
            } else {
                alert("كود العضوية غير صحيح. الرجاء المحاولة مرة أخرى.");
            }
        });

        // تبديل الوضع الليلي
        darkModeToggle.addEventListener('click', function() {
            toggleDarkMode();
            localStorage.setItem('darkMode', darkMode);
        });

        // التنقل بين الصفحات
        navLinks.forEach(link => {
            link.addEventListener('click', function(e) {
                e.preventDefault();
                const page = this.getAttribute('data-page');
                showPage(page);
                
                // تحديث حالة الروابط النشطة
                navLinks.forEach(navLink => navLink.classList.remove('active'));
                this.classList.add('active');
            });
        });
    }

    function login(code) {
        // تحديث حالة المستخدم في Firebase
        database.ref('users/' + code).set({
            name: members[code].name,
            avatar: members[code].avatar,
            bio: members[code].bio,
            points: members[code].points,
            messages: members[code].messages,
            badges: members[code].badges,
            online: true,
            lastActive: firebase.database.ServerValue.TIMESTAMP
        });
        
        // تعيين المستخدم الحالي
        currentUser = {
            code: code,
            ...members[code]
        };
        
        // إعداد حدث انقطاع الاتصال
        database.ref('users/' + code).onDisconnect().update({
            online: false,
            lastActive: firebase.database.ServerValue.TIMESTAMP
        });
        
        // إخفاء صفحة تسجيل الدخول وإظهار صفحة الشات
        loginPage.style.display = 'none';
        chatPage.style.display = 'flex';
        
        // تحديث الملف الشخصي
        updateProfile();
        
        // إظهار صفحة الشات افتراضياً
        showPage('chat');
        
        // متابعة الأعضاء المتصلين
        database.ref('users').on('value', (snapshot) => {
            updateOnlineMembers(snapshot.val());
        });
        
        // منح نقاط تسجيل الدخول اليومي
        grantDailyLoginPoints();
    }

    function grantDailyLoginPoints() {
        const lastLogin = localStorage.getItem('lastLogin');
        const today = new Date().toDateString();
        
        if (lastLogin !== today) {
            // زيادة النقاط
            currentUser.points += 5;
            database.ref('users/' + currentUser.code).update({
                points: currentUser.points
            });
            
            // تحديث تاريخ آخر تسجيل دخول
            localStorage.setItem('lastLogin', today);
            
            // إضافة إلى سجل النقاط
            addPointsHistory(5, "تسجيل دخول يومي");
            
            // تحديث الواجهة
            updateProfile();
            updateStore();
            updatePointsPage();
        }
    }

    function addPointsHistory(amount, reason) {
        const historyEntry = {
            amount: amount,
            reason: reason,
            timestamp: firebase.database.ServerValue.TIMESTAMP
        };
        
        database.ref('users/' + currentUser.code + '/history').push(historyEntry);
    }

    function toggleDarkMode() {
        darkMode = !darkMode;
        
        if (darkMode) {
            document.body.classList.add('dark-mode');
            darkModeStyle.disabled = false;
            darkModeToggle.querySelector('.fa-moon').style.display = 'none';
            darkModeToggle.querySelector('.fa-sun').style.display = 'inline-block';
        } else {
            document.body.classList.remove('dark-mode');
            darkModeStyle.disabled = true;
            darkModeToggle.querySelector('.fa-moon').style.display = 'inline-block';
            darkModeToggle.querySelector('.fa-sun').style.display = 'none';
        }
    }

    function showPage(page) {
        // إخفاء جميع الصفحات أولاً
        chatPage.style.display = 'none';
        profilePage.style.display = 'none';
        storePage.style.display = 'none';
        pointsPage.style.display = 'none';
        
        // إظهار الصفحة المطلوبة
        switch(page) {
            case 'chat':
                chatPage.style.display = 'flex';
                break;
            case 'profile':
                profilePage.style.display = 'block';
                updateProfile();
                break;
            case 'store':
                storePage.style.display = 'block';
                updateStore();
                break;
            case 'points':
                pointsPage.style.display = 'block';
                updatePointsPage();
                break;
        }
    }

    function updateOnlineMembers(usersData) {
        const onlineMembersList = document.getElementById('online-members-list');
        onlineMembersList.innerHTML = '';
        
        let onlineCount = 0;
        
        Object.entries(usersData).forEach(([code, userData]) => {
            if (userData.online && userData.online === true) {
                onlineCount++;
                const memberItem = document.createElement('li');
                memberItem.className = 'member-item';
                memberItem.innerHTML = `
                    <img src="images/avatars/${userData.avatar || 'default.png'}" alt="${userData.name}" class="member-avatar">
                    <span class="member-name">${userData.name}</span>
                `;
                
                memberItem.addEventListener('click', () => showMemberProfile(code, userData));
                onlineMembersList.appendChild(memberItem);
                
                // تحديث بيانات العضو المحلية
                if (members[code]) {
                    members[code] = { ...members[code], ...userData };
                }
            }
        });
        
        document.getElementById('online-count').textContent = onlineCount;
    }

    function showMemberProfile(memberCode, memberData) {
        // إنشاء عنصر عرض البروفايل
        const profileView = document.createElement('div');
        profileView.className = 'profile-view';
        profileView.innerHTML = `
            <div class="profile-view-container">
                <div class="profile-view-header">
                    <img src="images/avatars/${memberData.avatar || 'default.png'}" alt="${memberData.name}" class="profile-view-avatar">
                    <h2>${memberData.name}</h2>
                    <button class="close-profile-view">&times;</button>
                </div>
                <div class="profile-view-body">
                    <p>${memberData.bio || "لا يوجد وصف"}</p>
                    <div class="profile-view-badges">
                        ${(memberData.badges || []).map(badge => `<span class="badge">${badge}</span>`).join('')}
                    </div>
                    ${currentUser && currentUser.code !== memberCode ? `
                    <div class="transfer-points-form">
                        <h3>إرسال نقاط</h3>
                        <input type="number" id="transfer-amount" min="1" max="${currentUser.points}" placeholder="عدد النقاط">
                        <button id="send-points-btn">إرسال</button>
                    </div>
                    ` : ''}
                </div>
            </div>
        `;
        
        document.body.appendChild(profileView);
        
        // أحداث الأزرار
        document.querySelector('.close-profile-view').addEventListener('click', () => {
            profileView.remove();
        });
        
        if (currentUser && currentUser.code !== memberCode) {
            document.getElementById('send-points-btn').addEventListener('click', () => {
                const amount = parseInt(document.getElementById('transfer-amount').value);
                
                if (amount > 0 && amount <= currentUser.points) {
                    // تحديث النقاط في Firebase
                    database.ref('users/' + currentUser.code).update({
                        points: firebase.database.ServerValue.increment(-amount)
                    });
                    
                    database.ref('users/' + memberCode).update({
                        points: firebase.database.ServerValue.increment(amount)
                    });
                    
                    // تحديث البيانات المحلية
                    currentUser.points -= amount;
                    members[memberCode].points += amount;
                    
                    // إضافة إلى سجل النقاط
                    addPointsHistory(-amount, `تحويل إلى ${memberData.name}`);
                    
                    // إشعار بالنجاح
                    alert(`تم إرسال ${amount} نقطة إلى ${memberData.name}`);
                    profileView.remove();
                    
                    // تحديث الواجهة
                    updateProfile();
                    updateStore();
                    updatePointsPage();
                } else {
                    alert("الرجاء إدخال عدد نقاط صحيح");
                }
            });
        }
    }

    function updateProfile() {
        if (!currentUser) return;
        
        // جلب أحدث بيانات المستخدم من Firebase
        database.ref('users/' + currentUser.code).once('value').then((snapshot) => {
            const userData = snapshot.val();
            currentUser = { ...currentUser, ...userData };
            
            // تحديث الواجهة
            document.getElementById('profile-name').textContent = currentUser.name;
            document.getElementById('profile-avatar-img').src = `images/avatars/${currentUser.avatar || 'default.png'}`;
            document.getElementById('name-input').value = currentUser.name;
            document.getElementById('bio-input').value = currentUser.bio || '';
            document.getElementById('points-count').textContent = currentUser.points;
            document.getElementById('messages-count').textContent = currentUser.messages || 0;
            document.getElementById('member-since').textContent = "منذ 3 أشهر"; // يمكن جعلها ديناميكية
            
            // تحديث الشارات
            const badgesContainer = document.getElementById('profile-badges');
            badgesContainer.innerHTML = '';
            
            (currentUser.badges || []).forEach(badge => {
                const badgeElement = document.createElement('span');
                badgeElement.className = `badge ${badge.toLowerCase()}`;
                badgeElement.textContent = badge;
                badgesContainer.appendChild(badgeElement);
            });
            
            // إعداد أحداث تغيير الصورة
            document.getElementById('change-avatar-btn').addEventListener('click', function() {
                document.getElementById('avatar-upload').click();
            });
            
            document.getElementById('avatar-upload').addEventListener('change', function(e) {
                if (e.target.files && e.target.files[0]) {
                    const reader = new FileReader();
                    reader.onload = function(event) {
                        // تحديث الصورة محلياً وفي Firebase
                        document.getElementById('profile-avatar-img').src = event.target.result;
                        database.ref('users/' + currentUser.code).update({
                            avatar: event.target.result // في الواقع العملي، يجب رفع الصورة إلى Firebase Storage
                        });
                    };
                    reader.readAsDataURL(e.target.files[0]);
                }
            });
            
            // إعداد أحداث حفظ التغييرات
            document.getElementById('save-name-btn').addEventListener('click', function() {
                const newName = document.getElementById('name-input').value.trim();
                if (newName) {
                    // تحديث الاسم في Firebase
                    database.ref('users/' + currentUser.code).update({
                        name: newName
                    });
                    
                    currentUser.name = newName;
                    document.getElementById('profile-name').textContent = newName;
                    alert("تم حفظ التغييرات بنجاح");
                }
            });
            
            document.getElementById('save-bio-btn').addEventListener('click', function() {
                const newBio = document.getElementById('bio-input').value.trim();
                
                // تحديث البايو في Firebase
                database.ref('users/' + currentUser.code).update({
                    bio: newBio
                });
                
                currentUser.bio = newBio;
                alert("تم حفظ التغييرات بنجاح");
            });
        });
    }

    function updateStore() {
        if (!currentUser) return;
        
        // تحديث رصيد النقاط في المتجر
        document.getElementById('store-points-balance').textContent = currentUser.points;
        
        // إعداد أحداث شراء العناصر
        document.querySelectorAll('.buy-btn').forEach(button => {
            button.addEventListener('click', function() {
                const itemId = this.closest('.store-item').getAttribute('data-item-id');
                const itemPrice = parseInt(this.previousElementSibling.textContent);
                
                if (currentUser.points >= itemPrice) {
                    // خصم النقاط في Firebase
                    database.ref('users/' + currentUser.code).update({
                        points: firebase.database.ServerValue.increment(-itemPrice)
                    });
                    
                    // تطبيق العنصر المشترى
                    applyStoreItem(itemId);
                    
                    // إضافة إلى سجل النقاط
                    addPointsHistory(-itemPrice, "شراء من المتجر");
                    
                    // تحديث البيانات المحلية
                    currentUser.points -= itemPrice;
                    
                    // تحديث الواجهة
                    updateStore();
                    updateProfile();
                    
                    alert("تمت عملية الشراء بنجاح!");
                } else {
                    alert("نقاطك غير كافية لشراء هذا العنصر");
                }
            });
        });
    }

    function applyStoreItem(itemId) {
        let updates = {};
        
        switch(itemId) {
            case '1': // تأثير قوس قزح
                updates['nameEffect'] = 'rainbow';
                break;
            case '2': // اسم ذهبي
                updates['nameEffect'] = 'gold';
                break;
            case '3': // إطار ذهبي
                updates['avatarEffect'] = 'gold-frame';
                break;
            case '4': // تغيير لون النص
                updates['nameColor'] = getRandomColor();
                break;
            case '5': // VIP
            case '6': // MVP
            case '7': // Greatness
            case '8': // PRO
            case '9': // MAX
                const badge = document.querySelector(`.store-item[data-item-id="${itemId}"] .item-title`).textContent;
                updates['badges'] = firebase.database.ServerValue.arrayUnion(badge);
                break;
            case '10': // شارة مخصصة
                const customBadge = prompt("أدخل نص الشارة المخصصة:");
                if (customBadge && customBadge.trim()) {
                    updates['badges'] = firebase.database.ServerValue.arrayUnion(customBadge.trim());
                }
                break;
            case '11': // باقة عشوائية
                const randomItems = [1, 2, 3, 4, 5, 6, 7, 8, 9];
                const randomItem = randomItems[Math.floor(Math.random() * randomItems.length)];
                applyStoreItem(randomItem.toString());
                return;
        }
        
        // تطبيق التحديثات في Firebase
        database.ref('users/' + currentUser.code).update(updates);
    }

    function getRandomColor() {
        const letters = '0123456789ABCDEF';
        let color = '#';
        for (let i = 0; i < 6; i++) {
            color += letters[Math.floor(Math.random() * 16)];
        }
        return color;
    }

    function updatePointsPage() {
        if (!currentUser) return;
        
        // تحديث رصيد النقاط
        document.getElementById('current-points').textContent = currentUser.points;
        
        // تحديث قائمة الأعضاء للتحويل
        const transferToSelect = document.getElementById('transfer-to');
        transferToSelect.innerHTML = '<option value="">اختر عضواً</option>';
        
        database.ref('users').once('value').then((snapshot) => {
            const users = snapshot.val();
            
            Object.entries(users).forEach(([code, userData]) => {
                if (code !== currentUser.code && userData.online) {
                    const option = document.createElement('option');
                    option.value = code;
                    option.textContent = userData.name;
                    transferToSelect.appendChild(option);
                }
            });
        });
        
        // إعداد حدث تحويل النقاط
        document.getElementById('transfer-btn').addEventListener('click', function() {
            const amount = parseInt(document.getElementById('transfer-amount').value);
            const toCode = document.getElementById('transfer-to').value;
            
            if (!amount || amount <= 0) {
                alert("الرجاء إدخال مبلغ صحيح");
                return;
            }
            
            if (!toCode) {
                alert("الرجاء اختيار عضو");
                return;
            }
            
            if (amount > currentUser.points) {
                alert("نقاطك غير كافية للتحويل");
                return;
            }
            
            // تنفيذ التحويل في Firebase
            database.ref('users/' + currentUser.code).update({
                points: firebase.database.ServerValue.increment(-amount)
            });
            
            database.ref('users/' + toCode).update({
                points: firebase.database.ServerValue.increment(amount)
            });
            
            // إضافة إلى سجل النقاط
            addPointsHistory(-amount, `تحويل إلى ${toCode}`);
            
            // تحديث البيانات المحلية
            currentUser.points -= amount;
            
            // تحديث الواجهة
            updatePointsPage();
            updateProfile();
            updateStore();
            
            alert(`تم تحويل ${amount} نقطة بنجاح`);
        });
        
        // تحميل سجل النقاط
        database.ref('users/' + currentUser.code + '/history').once('value').then((snapshot) => {
            const historyBody = document.getElementById('points-history-body');
            historyBody.innerHTML = '';
            
            const historyData = snapshot.val() || {};
            
            Object.entries(historyData).forEach(([key, entry]) => {
                const row = document.createElement('tr');
                const date = new Date(entry.timestamp).toLocaleDateString();
                
                row.innerHTML = `
                    <td>${date}</td>
                    <td>${entry.amount > 0 ? '+' : ''}${entry.amount}</td>
                    <td>${entry.reason}</td>
                `;
                
                historyBody.appendChild(row);
            });
        });
    }
});